
<!doctype html>

<html lang="en">
<head>
  <style>
    #mapid { height: 500px; width: 100%};
  </style>
</head>
<body>
  <!--map-->
  <div id="mapid"></div>
  <button onclick="map.locate()" class='btn btn-primary'>Use my Location</button>

  <div class="wrap">
   <div class="search">
      <input type="text" id="searchTerm" placeholder="Landmark?">
      <button type="submit" class="searchButton" onclick="searchLandmark()">
        <i class="fa fa-search">Search</i>
     </button>
   </div>
</div>

 <script>
//empty vars to make layers
var theaters = []
var museums = []
var parks = []
var governments = []

fetch('api/v1/landmarks')
.then(function(response) {
  return response.json();
})
.then(function(myJson) {
  //iterate over landmarks, make points
  myJson['data'].forEach(function(landmark){
    let marker = L.marker([landmark['attributes']['lat'], landmark['attributes']['long']],{
      icon: selectMarkerColor(landmark['attributes']['category'])
    });
  //add popups to landmarks
  let name = landmark['attributes']['name']
  let id = landmark['id']
    marker.bindPopup(name.link(`/landmarks/${id}`) + `<br><button class="location_button" onclick="navigateTo(${landmark['attributes']['lat']}, ${landmark['attributes']['long']})" >Directions</button>`)
  if (landmark['attributes']['category'] === 'theater') {theaters.push(marker)}
  if (landmark['attributes']['category'] === 'museum') {museums.push(marker)}
  if (landmark['attributes']['category'] === 'park') {parks.push(marker)}
  if (landmark['attributes']['category'] === 'government') {governments.push(marker)}
  });
})
//make layers for map
.then(function(response){
  var museumMarkers = L.layerGroup(museums)
  var theaterMarkers = L.layerGroup(theaters)
  var parkMarkers = L.layerGroup(parks)
  var governmentMarkers = L.layerGroup(governments)
  var allMarkers = L.layerGroup(museums.concat(theaters).concat(parks).concat(governments))
//Make overlay interface
  var overlayMaps = {
      "museums": museumMarkers,
      "theaters": theaterMarkers,
      "parks": parkMarkers,
      "government": governmentMarkers,
      "all": allMarkers
  };
//make map
   map = L.map('mapid',{layers: [museumMarkers, theaterMarkers, parkMarkers, governmentMarkers]}).setView([39.7392358, -104.990251], 15);
  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
  attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
  maxZoom: 18,
  id: 'mapbox.streets',
  accessToken: '<%=ENV['MAPBOX_API_KEY']%>'
  }).addTo(map);
  map.on('locationerror', onLocationError);
  map.on('locationfound', onLocationFound);
  L.control.layers(overlayMaps).addTo(map)
});

//add my location popup When User clicks locate me
function onLocationFound(e) {
  map.setView(e.latlng, 17)
  var radius = e.accuracy;
  currentPosition = L.marker(e.latlng,{icon: userIcon}).addTo(map)
  .bindPopup("You are within " + radius + " meters from this point").openPopup();
}
//Display error if cannot find user
function onLocationError(e) {
  alert(e.message);
}

//Set route to null, allows us to change route
var routingControl = null
function navigateTo(lat,long){
  navigator.geolocation.getCurrentPosition(function(position) {
    var my_lat = position.coords.latitude;
    var my_lng = position.coords.longitude;
    if (routingControl){
      routingControl.setWaypoints([]);
      map.removeControl(routingControl);
      routingControl = null;
    }
 //draw line on map from mapbox/walking
    routingControl = L.Routing.control({
      waypoints: [
      L.latLng(my_lat, my_lng),
      L.latLng(lat, long)
      ],
      router: L.Routing.mapbox('<%=ENV['MAPBOX_API_KEY']%>',{profile: 'mapbox/cycling'}),
      createMarker: function() { return null; },
      lineOptions: { addWaypoints: false },
      collapsible: true
    })
    routingControl.addTo(map);
  });
}

 </script>

</body>
</html>
