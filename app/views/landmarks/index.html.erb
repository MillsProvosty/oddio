
<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <title>The HTML5 Herald</title>
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
  <style>
    #mapid { height: 500px; width: 100%};
    @import 'leaflet/dist/leaflet.css';
  </style>
  <!-- <link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
     integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
     crossorigin=""/>

     @import leaflet/dist/leaflet.css -->
     <!-- <script>
       require(leaflet/dist/leaflet.css)
     </script>
</head>

<body>
  <!--map-->
  <div id="mapid"></div>
  <button onclick="map.locate()">Use my Location</button>



  <!---->
  <!--start scripts-->
  <!--leaflet script-->
<!-- <script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"
 integrity="sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og=="
 crossorigin="">

</script> -->

 <!--script to load map with points-->
 <script>
   var map = L.map('mapid').setView([39.7392358, -104.990251], 13);
   L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
   attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
   maxZoom: 18,
   id: 'mapbox.streets',
   accessToken: 'pk.eyJ1IjoicGR1dmFsbCIsImEiOiJjanhveHczaG0wYnpsM21vN3AycjIxamo2In0.wgWKZjYwN5IckxRY5Qd9lQ'
}).addTo(map);

// L.Routing.control({
//     waypoints: [
//         L.latLng(40.74, -104.94),
//         L.latLng(42.55, -103.33)
//     ],
//     routeWhileDragging: true
// }).addTo(map);

//<!--make green markers-->
var greenIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

//<!--make purple markers-->
var violetIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-violet.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

//<!--make orange markers-->
var orangeIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

//<!--for map locate funktion-->

//color based on type of landmark
function selectMarkerColor(category){
  if (category === 'park') {
    return greenIcon
  } else if (category ==='theater') {
    return violetIcon
  } else {
    return orangeIcon
  }
};
//what to do after user enables location service
function onLocationFound(e) {
  fetch('api/v1/landmarks')
  .then(function(response) {
    return response.json();
  })
  .then(function(myJson) {
    //iterate over landmarks, make points
    myJson['data'].forEach(function(landmark){
      let marker = L.marker([landmark['attributes']['lat'], landmark['attributes']['long']],{
        icon: selectMarkerColor(landmark['attributes']['category'])
      }).addTo(map);
    //add marker popup
    let name = landmark['attributes']['name']
    let id = landmark['id']
      marker.bindPopup(name.link(`/landmarks/${id}`) + `<br><button class="location_button" onclick="navigateTo(${landmark['attributes']['lat']}, ${landmark['attributes']['long']})" >Take me Here</button>`)
    });
  });
  //set zoom level 17
  map.setView(e.latlng, 17)

  //add my location popup
    var radius = e.accuracy;
    L.marker(e.latlng).addTo(map)
        .bindPopup("You are within " + radius + " meters from this point").openPopup();
}
map.on('locationfound', onLocationFound);

<!--handle location error-->
function onLocationError(e) {
    alert(e.message);
}
map.on('locationerror', onLocationError);


function navigateTo(lat,long){
  navigator.geolocation.getCurrentPosition(function(position) {
      var my_lat = position.coords.latitude;
      var my_lng = position.coords.longitude;
      debugger
      MapHelper.removeRoutingControl()
      routing = L.Routing.control({
          waypoints: [
              L.latLng(my_lat, my_lng),
              L.latLng(lat, long)
          ],
          router: L.Routing.mapbox('pk.eyJ1IjoicGR1dmFsbCIsImEiOiJjanhveHczaG0wYnpsM21vN3AycjIxamo2In0.wgWKZjYwN5IckxRY5Qd9lQ'),
          // serviceUrl: `https://api.mapbox.com/directions/v5/mapbox/walking/${my_lat},${my_lng};${lat},${long}`,
          // params: {access_token: 'pk.eyJ1IjoicGR1dmFsbCIsImEiOiJjanhveHczaG0wYnpsM21vN3AycjIxamo2In0.wgWKZjYwN5IckxRY5Qd9lQ'},
          lineOptions: { addWaypoints: false },
          collapsible: true
      }).addTo(map);
  });
}




MapHelper = (function ($) {
    'use strict';

    var settings = {
        center: [0, 0],
        zoom: null,
    };

    var mapId = '';
    var map = null;
    var baseMaps = {};
    var overlayMaps = {};
    var routingControl = null;


    var init = function (mapLayerId, options) {
        settings = $.extend(settings, options);
        mapId = mapLayerId;
        initMap();
    };

    var getMap = function () {
        return map;
    };

    var addRoutingControl = function (waypoints) {
        if (routingControl != null)
            removeRoutingControl();

        routingControl = L.Routing.control({
            waypoints: waypoints
        }).addTo(map);
    };

    var removeRoutingControl = function () {
        if (routingControl != null) {
            map.removeControl(routingControl);
            routingControl = null;
        }
    };

    var panMap = function (lat, lng) {
        map.panTo(new L.LatLng(lat, lng));
    }

    var centerMap = function (e) {
        panMap(e.latlng.lat, e.latlng.lng);
    }

    var zoomIn = function (e) {
        map.zoomIn();
    }

    var zoomOut = function (e) {
        map.zoomOut();
    }

    var initMap = function () {
        var $this = this;

        map = L.map(mapId, {
            center: settings.center,
            zoom: settings.zoom,
            crs: L.CRS.EPSG3857,
            attributionControl: true,
            contextmenu: true,
            contextmenuWidth: 140
        });

        baseMaps["OSM"] = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright" target="_blank">OpenStreetMap</a> contributors'
        }).addTo(map);
    };

    var invalidateMapSize = function () {
        map.invalidateSize();
    }

    return {
        init: init, addRoutingControl: addRoutingControl, removeRoutingControl: removeRoutingControl,
        panMap: panMap, invalidateMapSize: invalidateMapSize, getMap: getMap
    }
}(jQuery));










 </script>

</body>
</html>
